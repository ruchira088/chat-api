---
- hosts: localhost
  connection: local

  tasks:
    - name: Install dependencies
      import_tasks: tasks/install-dependencies.yml

    - name: Gather git information
      import_tasks: tasks/git-info.yml

    - set_fact:
        namespace: "{{ 'chat-system' if git_branch == 'main' else 'chat-system-' + git_branch }}"

    - name: Render K8s resource files
      import_tasks: tasks/k8s-resource-files.yml
      vars:
        domain: chat-api.dev.ruchij.com
        hostname: "{{ domain if git_branch == 'main' else git_branch + '.' + domain }}"
        ghcr_credentials: "{{ lookup('aws_ssm', '/github/ghcr/docker-config', region='ap-southeast-2') }}"

    - name: Set kube_config
      import_tasks: tasks/k8s-config.yml

    - name: Deploy K8s resources
      block:
        - name: Create Namespace
          command: kubectl apply -f k8s-output/Namespace.yaml --kubeconfig {{ kubeconfig }}

    - name: Deploy Helm charts
      block:
        - name: Add Bitnami Helm charts repository
          command: helm repo add bitnami https://charts.bitnami.com/bitnami

        - name: Update Helm repositories
          command: helm repo update

        - name: Deploy PostgreSQL
          block:
            - name: Deploy database
              block:
                - name: Check Postgresql service in K8s
                  k8s_info:
                    kind: Service
                    namespace: "{{ namespace }}"
                    name: postgresql
                    kubeconfig: "{{ kubeconfig }}"
                  register: postgresql_output

                - name: Install Postgres Helm chart
                  shell: |
                    KUBECONFIG={{ kubeconfig }} \
                      helm install postgresql \
                        --set global.postgresql.auth.username="{{ secrets.database_user }}" \
                        --set global.postgresql.auth.password="{{ secrets.database_password }}" \
                        --set global.postgresql.auth.database=chat-system \
                        --namespace {{ namespace }} \
                        bitnami/postgresql
                  when: postgresql_output.resources | length == 0

        - name: Deploy Redis
          block:
            - name: Check Redis service in K8s
              k8s_info:
                kind: Service
                namespace: "{{ namespace }}"
                name: redis-master
                kubeconfig: "{{ kubeconfig }}"
              register: redis_output

            - name: Install Redis Helm chart
              shell: |
                KUBECONFIG={{ kubeconfig }} \
                  helm install redis \
                    --set auth.password="{{ secrets.redis_password }}" \
                    --set architecture=standalone \
                    --namespace {{ namespace }} \
                    bitnami/redis
              when: redis_output.resources | length == 0

        - name: Deploy Mongo
          block:
#            - name: Check Redis service in K8s
#              k8s_info:
#                kind: Service
#                namespace: "{{ namespace }}"
#                name: redis-master
#                kubeconfig: "{{ kubeconfig }}"
#              register: redis_output

            - name: Install Mongo Helm chart
              shell: |
                KUBECONFIG={{ kubeconfig }} \
                  helm install mongo \
                    --set auth.rootUser="{{ secrets.mongo_user }}" \
                    --set auth.rootPassword="{{ secrets.mongo_password }}" \
                    --set architecture=standalone \
                    --namespace {{ namespace }} \
                    bitnami/mongo
              when: mongo_output.resources | length == 0

        - name: Deploy Kafka Fast Data
          block:
            - name: Create ConfigMap
              command: kubectl apply -f k8s-output/kafka-fast-data/ConfigMap.yaml --kubeconfig {{ kubeconfig }}

            - name: Create Secrets
              command: kubectl apply -f k8s-output/kafka-fast-data/Secrets.yaml --kubeconfig {{ kubeconfig }}

            - name: Deploy application
              command: kubectl apply -f k8s-output/kafka-fast-data --kubeconfig {{ kubeconfig }}
#
#        - name: Create Docker registry secret
#          command: kubectl apply -f k8s-output/DockerRegistryCredentials.yaml --kubeconfig {{ kubeconfig }}
#
#        - name: Create data ConfigMap
#          command: kubectl apply -f k8s-output/DataConfigMap.yaml --kubeconfig {{ kubeconfig }}
#
#        - name: Create file ConfigMap
#          command: kubectl apply -f k8s-output/FileConfigMap.yaml --kubeconfig {{ kubeconfig }}
#
#        - name: Create Secrets
#          command: kubectl apply -f k8s-output/Secrets.yaml --kubeconfig {{ kubeconfig }}
#
#        - name: Deploy application
#          command: kubectl apply -f k8s-output --kubeconfig {{ kubeconfig }}
#
#        - name: Wait for successful deployment
#          command: kubectl rollout status deployment chat-api-deployment --kubeconfig {{ kubeconfig }} -n {{ namespace }}
#
#    - name: Clean up output directory
#      file:
#        path: k8s-output
#        state: absent
