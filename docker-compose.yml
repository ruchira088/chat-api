version: "3.8"

x-chat-api-envs:
  environment: &chat-api-envs
    DATABASE_URL: "jdbc:postgresql://postgres:5432/chat-system"
    DATABASE_USER: "admin"
    DATABASE_PASSWORD: "password"
    MONGO_URL: "mongodb://mongo:27017"
    REDIS_HOSTNAME: "redis"
    REDIS_PORT: "6379"
    REDIS_PASSWORD: "my-redis-password"
    KAFKA_BOOTSTRAP_SERVERS: "kafka-broker:9092"
    SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    CHAT_API_HOSTNAME: "chat-api-1"
    SERVICE_TOKEN: "my-service-token"

services:
  load-balancer:
    image: nginx
    healthcheck:
      test: "/opt/scripts/wait-for-it.sh localhost:443"
      start_period: 5s
      interval: 5s
      timeout: 3s
    depends_on:
      - chat-api-1
      - chat-api-2
      - chat-api-3
    ports:
      - 443:443
    volumes:
      - "./nginx/ssl:/etc/ssl"
      - "./nginx/default.conf:/etc/nginx/conf.d/default.conf"
      - "./nginx/files:/www/data"
      - "./docker-compose/scripts:/opt/scripts"

  chat-api-1:
    image: chat-api:latest
    healthcheck: &chat-api-health-check
      test: "/opt/scripts/wait-for-it.sh localhost:8000"
      start_period: 10s
      interval: 10s
      timeout: 5s
    depends_on: &chat-api-depends-on
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      chat-migration-app:
        condition: service_completed_successfully
    volumes: &chat-api-volumes
      - "./docker-compose/scripts:/opt/scripts"
      - "./src/main/resources/logback.xml:/opt/data/logback.xml"
      - "./file-store:/opt/file-store"
    environment:
      <<: *chat-api-envs
      CHAT_API_HOSTNAME: "chat-api-1"

  chat-api-2:
    image: chat-api:latest
    healthcheck: *chat-api-health-check
    depends_on: *chat-api-depends-on
    volumes: *chat-api-volumes
    environment:
      <<: *chat-api-envs
      CHAT_API_HOSTNAME: "chat-api-2"

  chat-api-3:
    image: chat-api:latest
    healthcheck: *chat-api-health-check
    depends_on: *chat-api-depends-on
    volumes: *chat-api-volumes
    environment:
      <<: *chat-api-envs
      CHAT_API_HOSTNAME: "chat-api-3"

  chat-worker-1: &chat-worker
    image: chat-worker:latest
    depends_on:
      mongo:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka-broker:9092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      API_SERVICE_URL: "http://load-balancer"
      API_AUTHENTICATION_TOKEN: "my-service-token"
      MONGO_URL: "mongodb://mongo:27017"
      MONGO_DATABASE: "chat-worker"

  chat-worker-2: *chat-worker

  chat-worker-3: *chat-worker

  chat-migration-app:
    image: chat-migration-app:latest
    depends_on:
      postgres:
          condition: service_healthy
    volumes:
      - "./migration-app/src/main/resources/logback.xml:/opt/data/logback.xml"
    environment:
      DATABASE_URL: "jdbc:postgresql://postgres:5432/chat-system"
      DATABASE_USER: "admin"
      DATABASE_PASSWORD: "password"

  postgres:
    image: postgres
    #    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      test: "pg_isready -U admin -d chat-system"
      start_period: 10s
      interval: 10s
      timeout: 5s
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: "chat-system"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "password"

  mongo:
    image: mongo
    healthcheck:
      test: "/opt/scripts/wait-for-it.sh mongo:27017"
      start_period: 10s
      interval: 10s
      timeout: 5s
    ports:
      - 27017:27017
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  redis:
    image: redis
    command: "redis-server --requirepass my-redis-password"
    healthcheck:
      test: "redis-cli ping"
      start_period: 1s
      interval: 2s
      timeout: 1s
    ports:
      - 6379:6379

  zookeeper:
    image: zookeeper
    healthcheck:
      test: "/opt/scripts/wait-for -t 3 zookeeper:2181"
      start_period: 5s
      interval: 5s
      timeout: 3s
    environment:
      ZOO_LOG4J_PROP: ERROR,CONSOLE
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  kafka-broker:
    image: confluentinc/cp-kafka
    healthcheck:
      test: "/opt/scripts/wait-for -t 3 kafka-broker:9092"
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  schema-registry:
    image: confluentinc/cp-schema-registry
    healthcheck:
      test: "/opt/scripts/wait-for -t 3 schema-registry:8081"
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      kafka-broker:
        condition: service_healthy
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-broker:9092"
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  schema-registry-ui:
    image: landoop/schema-registry-ui
    healthcheck:
      test: "/opt/scripts/wait-for -t 3 schema-registry-ui:8000"
      start_period: 10s
      interval: 10s
      timeout: 5s
    depends_on:
      schema-registry:
        condition: service_healthy
    ports:
      - 8000:8000
    environment:
      SCHEMAREGISTRY_URL: "http://schema-registry:8081"
      PROXY: "true"
    volumes:
      - "./docker-compose/scripts:/opt/scripts"